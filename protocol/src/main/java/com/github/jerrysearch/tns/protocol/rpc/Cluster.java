/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.jerrysearch.tns.protocol.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-4-5")
public class Cluster {

  public interface Iface {

    /**
     * cluster上线
     * 
     * @param cnode
     */
    public void up(com.github.jerrysearch.tns.protocol.rpc.TCNode cnode) throws org.apache.thrift.TException;

    /**
     * 一次性推送tns、service节点列表
     * 
     * @param cList
     * @param sList
     */
    public void pushClusterAndServiceList(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList, List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList) throws org.apache.thrift.TException;

    /**
     * 获取所有service node列表
     * 
     * @param clientId
     */
    public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> allServiceList(String clientId) throws org.apache.thrift.TException;

    /**
     * 获取所有的cluster node列表
     * 
     * @param clientId
     */
    public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> clusterList(String clientId) throws org.apache.thrift.TException;

    /**
     * 取走所有用于log统计的event数据
     * 
     * @param clientId
     */
    public List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> takeAllLogEvent(String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void up(com.github.jerrysearch.tns.protocol.rpc.TCNode cnode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pushClusterAndServiceList(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList, List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void allServiceList(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clusterList(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void takeAllLogEvent(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void up(com.github.jerrysearch.tns.protocol.rpc.TCNode cnode) throws org.apache.thrift.TException
    {
      send_up(cnode);
    }

    public void send_up(com.github.jerrysearch.tns.protocol.rpc.TCNode cnode) throws org.apache.thrift.TException
    {
      up_args args = new up_args();
      args.setCnode(cnode);
      sendBase("up", args);
    }

    public void pushClusterAndServiceList(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList, List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList) throws org.apache.thrift.TException
    {
      send_pushClusterAndServiceList(cList, sList);
    }

    public void send_pushClusterAndServiceList(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList, List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList) throws org.apache.thrift.TException
    {
      pushClusterAndServiceList_args args = new pushClusterAndServiceList_args();
      args.setCList(cList);
      args.setSList(sList);
      sendBase("pushClusterAndServiceList", args);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> allServiceList(String clientId) throws org.apache.thrift.TException
    {
      send_allServiceList(clientId);
      return recv_allServiceList();
    }

    public void send_allServiceList(String clientId) throws org.apache.thrift.TException
    {
      allServiceList_args args = new allServiceList_args();
      args.setClientId(clientId);
      sendBase("allServiceList", args);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> recv_allServiceList() throws org.apache.thrift.TException
    {
      allServiceList_result result = new allServiceList_result();
      receiveBase(result, "allServiceList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "allServiceList failed: unknown result");
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> clusterList(String clientId) throws org.apache.thrift.TException
    {
      send_clusterList(clientId);
      return recv_clusterList();
    }

    public void send_clusterList(String clientId) throws org.apache.thrift.TException
    {
      clusterList_args args = new clusterList_args();
      args.setClientId(clientId);
      sendBase("clusterList", args);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> recv_clusterList() throws org.apache.thrift.TException
    {
      clusterList_result result = new clusterList_result();
      receiveBase(result, "clusterList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clusterList failed: unknown result");
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> takeAllLogEvent(String clientId) throws org.apache.thrift.TException
    {
      send_takeAllLogEvent(clientId);
      return recv_takeAllLogEvent();
    }

    public void send_takeAllLogEvent(String clientId) throws org.apache.thrift.TException
    {
      takeAllLogEvent_args args = new takeAllLogEvent_args();
      args.setClientId(clientId);
      sendBase("takeAllLogEvent", args);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> recv_takeAllLogEvent() throws org.apache.thrift.TException
    {
      takeAllLogEvent_result result = new takeAllLogEvent_result();
      receiveBase(result, "takeAllLogEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "takeAllLogEvent failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void up(com.github.jerrysearch.tns.protocol.rpc.TCNode cnode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      up_call method_call = new up_call(cnode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class up_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.github.jerrysearch.tns.protocol.rpc.TCNode cnode;
      public up_call(com.github.jerrysearch.tns.protocol.rpc.TCNode cnode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.cnode = cnode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("up", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        up_args args = new up_args();
        args.setCnode(cnode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void pushClusterAndServiceList(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList, List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushClusterAndServiceList_call method_call = new pushClusterAndServiceList_call(cList, sList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushClusterAndServiceList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList;
      private List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList;
      public pushClusterAndServiceList_call(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList, List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.cList = cList;
        this.sList = sList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushClusterAndServiceList", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        pushClusterAndServiceList_args args = new pushClusterAndServiceList_args();
        args.setCList(cList);
        args.setSList(sList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void allServiceList(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      allServiceList_call method_call = new allServiceList_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class allServiceList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public allServiceList_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("allServiceList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        allServiceList_args args = new allServiceList_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_allServiceList();
      }
    }

    public void clusterList(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clusterList_call method_call = new clusterList_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clusterList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public clusterList_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clusterList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clusterList_args args = new clusterList_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clusterList();
      }
    }

    public void takeAllLogEvent(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      takeAllLogEvent_call method_call = new takeAllLogEvent_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class takeAllLogEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public takeAllLogEvent_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("takeAllLogEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        takeAllLogEvent_args args = new takeAllLogEvent_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_takeAllLogEvent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("up", new up());
      processMap.put("pushClusterAndServiceList", new pushClusterAndServiceList());
      processMap.put("allServiceList", new allServiceList());
      processMap.put("clusterList", new clusterList());
      processMap.put("takeAllLogEvent", new takeAllLogEvent());
      return processMap;
    }

    public static class up<I extends Iface> extends org.apache.thrift.ProcessFunction<I, up_args> {
      public up() {
        super("up");
      }

      public up_args getEmptyArgsInstance() {
        return new up_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, up_args args) throws org.apache.thrift.TException {
        iface.up(args.cnode);
        return null;
      }
    }

    public static class pushClusterAndServiceList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushClusterAndServiceList_args> {
      public pushClusterAndServiceList() {
        super("pushClusterAndServiceList");
      }

      public pushClusterAndServiceList_args getEmptyArgsInstance() {
        return new pushClusterAndServiceList_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, pushClusterAndServiceList_args args) throws org.apache.thrift.TException {
        iface.pushClusterAndServiceList(args.cList, args.sList);
        return null;
      }
    }

    public static class allServiceList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, allServiceList_args> {
      public allServiceList() {
        super("allServiceList");
      }

      public allServiceList_args getEmptyArgsInstance() {
        return new allServiceList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public allServiceList_result getResult(I iface, allServiceList_args args) throws org.apache.thrift.TException {
        allServiceList_result result = new allServiceList_result();
        result.success = iface.allServiceList(args.clientId);
        return result;
      }
    }

    public static class clusterList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clusterList_args> {
      public clusterList() {
        super("clusterList");
      }

      public clusterList_args getEmptyArgsInstance() {
        return new clusterList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clusterList_result getResult(I iface, clusterList_args args) throws org.apache.thrift.TException {
        clusterList_result result = new clusterList_result();
        result.success = iface.clusterList(args.clientId);
        return result;
      }
    }

    public static class takeAllLogEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, takeAllLogEvent_args> {
      public takeAllLogEvent() {
        super("takeAllLogEvent");
      }

      public takeAllLogEvent_args getEmptyArgsInstance() {
        return new takeAllLogEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public takeAllLogEvent_result getResult(I iface, takeAllLogEvent_args args) throws org.apache.thrift.TException {
        takeAllLogEvent_result result = new takeAllLogEvent_result();
        result.success = iface.takeAllLogEvent(args.clientId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("up", new up());
      processMap.put("pushClusterAndServiceList", new pushClusterAndServiceList());
      processMap.put("allServiceList", new allServiceList());
      processMap.put("clusterList", new clusterList());
      processMap.put("takeAllLogEvent", new takeAllLogEvent());
      return processMap;
    }

    public static class up<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, up_args, Void> {
      public up() {
        super("up");
      }

      public up_args getEmptyArgsInstance() {
        return new up_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, up_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.up(args.cnode,resultHandler);
      }
    }

    public static class pushClusterAndServiceList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushClusterAndServiceList_args, Void> {
      public pushClusterAndServiceList() {
        super("pushClusterAndServiceList");
      }

      public pushClusterAndServiceList_args getEmptyArgsInstance() {
        return new pushClusterAndServiceList_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, pushClusterAndServiceList_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.pushClusterAndServiceList(args.cList, args.sList,resultHandler);
      }
    }

    public static class allServiceList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, allServiceList_args, List<com.github.jerrysearch.tns.protocol.rpc.TSNode>> {
      public allServiceList() {
        super("allServiceList");
      }

      public allServiceList_args getEmptyArgsInstance() {
        return new allServiceList_args();
      }

      public AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.TSNode>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.TSNode>>() { 
          public void onComplete(List<com.github.jerrysearch.tns.protocol.rpc.TSNode> o) {
            allServiceList_result result = new allServiceList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            allServiceList_result result = new allServiceList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, allServiceList_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.TSNode>> resultHandler) throws TException {
        iface.allServiceList(args.clientId,resultHandler);
      }
    }

    public static class clusterList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clusterList_args, List<com.github.jerrysearch.tns.protocol.rpc.TCNode>> {
      public clusterList() {
        super("clusterList");
      }

      public clusterList_args getEmptyArgsInstance() {
        return new clusterList_args();
      }

      public AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.TCNode>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.TCNode>>() { 
          public void onComplete(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> o) {
            clusterList_result result = new clusterList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clusterList_result result = new clusterList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clusterList_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.TCNode>> resultHandler) throws TException {
        iface.clusterList(args.clientId,resultHandler);
      }
    }

    public static class takeAllLogEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, takeAllLogEvent_args, List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>> {
      public takeAllLogEvent() {
        super("takeAllLogEvent");
      }

      public takeAllLogEvent_args getEmptyArgsInstance() {
        return new takeAllLogEvent_args();
      }

      public AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>>() { 
          public void onComplete(List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> o) {
            takeAllLogEvent_result result = new takeAllLogEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            takeAllLogEvent_result result = new takeAllLogEvent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, takeAllLogEvent_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>> resultHandler) throws TException {
        iface.takeAllLogEvent(args.clientId,resultHandler);
      }
    }

  }

  public static class up_args implements org.apache.thrift.TBase<up_args, up_args._Fields>, java.io.Serializable, Cloneable, Comparable<up_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("up_args");

    private static final org.apache.thrift.protocol.TField CNODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cnode", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new up_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new up_argsTupleSchemeFactory());
    }

    public com.github.jerrysearch.tns.protocol.rpc.TCNode cnode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNODE((short)1, "cnode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNODE
            return CNODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNODE, new org.apache.thrift.meta_data.FieldMetaData("cnode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.jerrysearch.tns.protocol.rpc.TCNode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(up_args.class, metaDataMap);
    }

    public up_args() {
    }

    public up_args(
      com.github.jerrysearch.tns.protocol.rpc.TCNode cnode)
    {
      this();
      this.cnode = cnode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public up_args(up_args other) {
      if (other.isSetCnode()) {
        this.cnode = new com.github.jerrysearch.tns.protocol.rpc.TCNode(other.cnode);
      }
    }

    public up_args deepCopy() {
      return new up_args(this);
    }

    @Override
    public void clear() {
      this.cnode = null;
    }

    public com.github.jerrysearch.tns.protocol.rpc.TCNode getCnode() {
      return this.cnode;
    }

    public up_args setCnode(com.github.jerrysearch.tns.protocol.rpc.TCNode cnode) {
      this.cnode = cnode;
      return this;
    }

    public void unsetCnode() {
      this.cnode = null;
    }

    /** Returns true if field cnode is set (has been assigned a value) and false otherwise */
    public boolean isSetCnode() {
      return this.cnode != null;
    }

    public void setCnodeIsSet(boolean value) {
      if (!value) {
        this.cnode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CNODE:
        if (value == null) {
          unsetCnode();
        } else {
          setCnode((com.github.jerrysearch.tns.protocol.rpc.TCNode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CNODE:
        return getCnode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CNODE:
        return isSetCnode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof up_args)
        return this.equals((up_args)that);
      return false;
    }

    public boolean equals(up_args that) {
      if (that == null)
        return false;

      boolean this_present_cnode = true && this.isSetCnode();
      boolean that_present_cnode = true && that.isSetCnode();
      if (this_present_cnode || that_present_cnode) {
        if (!(this_present_cnode && that_present_cnode))
          return false;
        if (!this.cnode.equals(that.cnode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cnode = true && (isSetCnode());
      list.add(present_cnode);
      if (present_cnode)
        list.add(cnode);

      return list.hashCode();
    }

    @Override
    public int compareTo(up_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCnode()).compareTo(other.isSetCnode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnode, other.cnode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("up_args(");
      boolean first = true;

      sb.append("cnode:");
      if (this.cnode == null) {
        sb.append("null");
      } else {
        sb.append(this.cnode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cnode != null) {
        cnode.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class up_argsStandardSchemeFactory implements SchemeFactory {
      public up_argsStandardScheme getScheme() {
        return new up_argsStandardScheme();
      }
    }

    private static class up_argsStandardScheme extends StandardScheme<up_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, up_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnode = new com.github.jerrysearch.tns.protocol.rpc.TCNode();
                struct.cnode.read(iprot);
                struct.setCnodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, up_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cnode != null) {
          oprot.writeFieldBegin(CNODE_FIELD_DESC);
          struct.cnode.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class up_argsTupleSchemeFactory implements SchemeFactory {
      public up_argsTupleScheme getScheme() {
        return new up_argsTupleScheme();
      }
    }

    private static class up_argsTupleScheme extends TupleScheme<up_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, up_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCnode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCnode()) {
          struct.cnode.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, up_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cnode = new com.github.jerrysearch.tns.protocol.rpc.TCNode();
          struct.cnode.read(iprot);
          struct.setCnodeIsSet(true);
        }
      }
    }

  }

  public static class pushClusterAndServiceList_args implements org.apache.thrift.TBase<pushClusterAndServiceList_args, pushClusterAndServiceList_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushClusterAndServiceList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushClusterAndServiceList_args");

    private static final org.apache.thrift.protocol.TField C_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField S_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushClusterAndServiceList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushClusterAndServiceList_argsTupleSchemeFactory());
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList; // required
    public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_LIST((short)1, "cList"),
      S_LIST((short)2, "sList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_LIST
            return C_LIST;
          case 2: // S_LIST
            return S_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_LIST, new org.apache.thrift.meta_data.FieldMetaData("cList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.jerrysearch.tns.protocol.rpc.TCNode.class))));
      tmpMap.put(_Fields.S_LIST, new org.apache.thrift.meta_data.FieldMetaData("sList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.jerrysearch.tns.protocol.rpc.TSNode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushClusterAndServiceList_args.class, metaDataMap);
    }

    public pushClusterAndServiceList_args() {
    }

    public pushClusterAndServiceList_args(
      List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList,
      List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList)
    {
      this();
      this.cList = cList;
      this.sList = sList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushClusterAndServiceList_args(pushClusterAndServiceList_args other) {
      if (other.isSetCList()) {
        List<com.github.jerrysearch.tns.protocol.rpc.TCNode> __this__cList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>(other.cList.size());
        for (com.github.jerrysearch.tns.protocol.rpc.TCNode other_element : other.cList) {
          __this__cList.add(new com.github.jerrysearch.tns.protocol.rpc.TCNode(other_element));
        }
        this.cList = __this__cList;
      }
      if (other.isSetSList()) {
        List<com.github.jerrysearch.tns.protocol.rpc.TSNode> __this__sList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>(other.sList.size());
        for (com.github.jerrysearch.tns.protocol.rpc.TSNode other_element : other.sList) {
          __this__sList.add(new com.github.jerrysearch.tns.protocol.rpc.TSNode(other_element));
        }
        this.sList = __this__sList;
      }
    }

    public pushClusterAndServiceList_args deepCopy() {
      return new pushClusterAndServiceList_args(this);
    }

    @Override
    public void clear() {
      this.cList = null;
      this.sList = null;
    }

    public int getCListSize() {
      return (this.cList == null) ? 0 : this.cList.size();
    }

    public java.util.Iterator<com.github.jerrysearch.tns.protocol.rpc.TCNode> getCListIterator() {
      return (this.cList == null) ? null : this.cList.iterator();
    }

    public void addToCList(com.github.jerrysearch.tns.protocol.rpc.TCNode elem) {
      if (this.cList == null) {
        this.cList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>();
      }
      this.cList.add(elem);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> getCList() {
      return this.cList;
    }

    public pushClusterAndServiceList_args setCList(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> cList) {
      this.cList = cList;
      return this;
    }

    public void unsetCList() {
      this.cList = null;
    }

    /** Returns true if field cList is set (has been assigned a value) and false otherwise */
    public boolean isSetCList() {
      return this.cList != null;
    }

    public void setCListIsSet(boolean value) {
      if (!value) {
        this.cList = null;
      }
    }

    public int getSListSize() {
      return (this.sList == null) ? 0 : this.sList.size();
    }

    public java.util.Iterator<com.github.jerrysearch.tns.protocol.rpc.TSNode> getSListIterator() {
      return (this.sList == null) ? null : this.sList.iterator();
    }

    public void addToSList(com.github.jerrysearch.tns.protocol.rpc.TSNode elem) {
      if (this.sList == null) {
        this.sList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>();
      }
      this.sList.add(elem);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> getSList() {
      return this.sList;
    }

    public pushClusterAndServiceList_args setSList(List<com.github.jerrysearch.tns.protocol.rpc.TSNode> sList) {
      this.sList = sList;
      return this;
    }

    public void unsetSList() {
      this.sList = null;
    }

    /** Returns true if field sList is set (has been assigned a value) and false otherwise */
    public boolean isSetSList() {
      return this.sList != null;
    }

    public void setSListIsSet(boolean value) {
      if (!value) {
        this.sList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case C_LIST:
        if (value == null) {
          unsetCList();
        } else {
          setCList((List<com.github.jerrysearch.tns.protocol.rpc.TCNode>)value);
        }
        break;

      case S_LIST:
        if (value == null) {
          unsetSList();
        } else {
          setSList((List<com.github.jerrysearch.tns.protocol.rpc.TSNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case C_LIST:
        return getCList();

      case S_LIST:
        return getSList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case C_LIST:
        return isSetCList();
      case S_LIST:
        return isSetSList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushClusterAndServiceList_args)
        return this.equals((pushClusterAndServiceList_args)that);
      return false;
    }

    public boolean equals(pushClusterAndServiceList_args that) {
      if (that == null)
        return false;

      boolean this_present_cList = true && this.isSetCList();
      boolean that_present_cList = true && that.isSetCList();
      if (this_present_cList || that_present_cList) {
        if (!(this_present_cList && that_present_cList))
          return false;
        if (!this.cList.equals(that.cList))
          return false;
      }

      boolean this_present_sList = true && this.isSetSList();
      boolean that_present_sList = true && that.isSetSList();
      if (this_present_sList || that_present_sList) {
        if (!(this_present_sList && that_present_sList))
          return false;
        if (!this.sList.equals(that.sList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cList = true && (isSetCList());
      list.add(present_cList);
      if (present_cList)
        list.add(cList);

      boolean present_sList = true && (isSetSList());
      list.add(present_sList);
      if (present_sList)
        list.add(sList);

      return list.hashCode();
    }

    @Override
    public int compareTo(pushClusterAndServiceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCList()).compareTo(other.isSetCList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cList, other.cList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSList()).compareTo(other.isSetSList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sList, other.sList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushClusterAndServiceList_args(");
      boolean first = true;

      sb.append("cList:");
      if (this.cList == null) {
        sb.append("null");
      } else {
        sb.append(this.cList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sList:");
      if (this.sList == null) {
        sb.append("null");
      } else {
        sb.append(this.sList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushClusterAndServiceList_argsStandardSchemeFactory implements SchemeFactory {
      public pushClusterAndServiceList_argsStandardScheme getScheme() {
        return new pushClusterAndServiceList_argsStandardScheme();
      }
    }

    private static class pushClusterAndServiceList_argsStandardScheme extends StandardScheme<pushClusterAndServiceList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushClusterAndServiceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.cList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>(_list0.size);
                  com.github.jerrysearch.tns.protocol.rpc.TCNode _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.github.jerrysearch.tns.protocol.rpc.TCNode();
                    _elem1.read(iprot);
                    struct.cList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setCListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.sList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>(_list3.size);
                  com.github.jerrysearch.tns.protocol.rpc.TSNode _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = new com.github.jerrysearch.tns.protocol.rpc.TSNode();
                    _elem4.read(iprot);
                    struct.sList.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setSListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushClusterAndServiceList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cList != null) {
          oprot.writeFieldBegin(C_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cList.size()));
            for (com.github.jerrysearch.tns.protocol.rpc.TCNode _iter6 : struct.cList)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sList != null) {
          oprot.writeFieldBegin(S_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sList.size()));
            for (com.github.jerrysearch.tns.protocol.rpc.TSNode _iter7 : struct.sList)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushClusterAndServiceList_argsTupleSchemeFactory implements SchemeFactory {
      public pushClusterAndServiceList_argsTupleScheme getScheme() {
        return new pushClusterAndServiceList_argsTupleScheme();
      }
    }

    private static class pushClusterAndServiceList_argsTupleScheme extends TupleScheme<pushClusterAndServiceList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushClusterAndServiceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCList()) {
          optionals.set(0);
        }
        if (struct.isSetSList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCList()) {
          {
            oprot.writeI32(struct.cList.size());
            for (com.github.jerrysearch.tns.protocol.rpc.TCNode _iter8 : struct.cList)
            {
              _iter8.write(oprot);
            }
          }
        }
        if (struct.isSetSList()) {
          {
            oprot.writeI32(struct.sList.size());
            for (com.github.jerrysearch.tns.protocol.rpc.TSNode _iter9 : struct.sList)
            {
              _iter9.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushClusterAndServiceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.cList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>(_list10.size);
            com.github.jerrysearch.tns.protocol.rpc.TCNode _elem11;
            for (int _i12 = 0; _i12 < _list10.size; ++_i12)
            {
              _elem11 = new com.github.jerrysearch.tns.protocol.rpc.TCNode();
              _elem11.read(iprot);
              struct.cList.add(_elem11);
            }
          }
          struct.setCListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sList = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>(_list13.size);
            com.github.jerrysearch.tns.protocol.rpc.TSNode _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.github.jerrysearch.tns.protocol.rpc.TSNode();
              _elem14.read(iprot);
              struct.sList.add(_elem14);
            }
          }
          struct.setSListIsSet(true);
        }
      }
    }

  }

  public static class allServiceList_args implements org.apache.thrift.TBase<allServiceList_args, allServiceList_args._Fields>, java.io.Serializable, Cloneable, Comparable<allServiceList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allServiceList_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new allServiceList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new allServiceList_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allServiceList_args.class, metaDataMap);
    }

    public allServiceList_args() {
    }

    public allServiceList_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allServiceList_args(allServiceList_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public allServiceList_args deepCopy() {
      return new allServiceList_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public allServiceList_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof allServiceList_args)
        return this.equals((allServiceList_args)that);
      return false;
    }

    public boolean equals(allServiceList_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(allServiceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("allServiceList_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allServiceList_argsStandardSchemeFactory implements SchemeFactory {
      public allServiceList_argsStandardScheme getScheme() {
        return new allServiceList_argsStandardScheme();
      }
    }

    private static class allServiceList_argsStandardScheme extends StandardScheme<allServiceList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allServiceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allServiceList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allServiceList_argsTupleSchemeFactory implements SchemeFactory {
      public allServiceList_argsTupleScheme getScheme() {
        return new allServiceList_argsTupleScheme();
      }
    }

    private static class allServiceList_argsTupleScheme extends TupleScheme<allServiceList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allServiceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allServiceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class allServiceList_result implements org.apache.thrift.TBase<allServiceList_result, allServiceList_result._Fields>, java.io.Serializable, Cloneable, Comparable<allServiceList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allServiceList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new allServiceList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new allServiceList_resultTupleSchemeFactory());
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.jerrysearch.tns.protocol.rpc.TSNode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allServiceList_result.class, metaDataMap);
    }

    public allServiceList_result() {
    }

    public allServiceList_result(
      List<com.github.jerrysearch.tns.protocol.rpc.TSNode> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allServiceList_result(allServiceList_result other) {
      if (other.isSetSuccess()) {
        List<com.github.jerrysearch.tns.protocol.rpc.TSNode> __this__success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>(other.success.size());
        for (com.github.jerrysearch.tns.protocol.rpc.TSNode other_element : other.success) {
          __this__success.add(new com.github.jerrysearch.tns.protocol.rpc.TSNode(other_element));
        }
        this.success = __this__success;
      }
    }

    public allServiceList_result deepCopy() {
      return new allServiceList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.github.jerrysearch.tns.protocol.rpc.TSNode> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.github.jerrysearch.tns.protocol.rpc.TSNode elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>();
      }
      this.success.add(elem);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TSNode> getSuccess() {
      return this.success;
    }

    public allServiceList_result setSuccess(List<com.github.jerrysearch.tns.protocol.rpc.TSNode> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.github.jerrysearch.tns.protocol.rpc.TSNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof allServiceList_result)
        return this.equals((allServiceList_result)that);
      return false;
    }

    public boolean equals(allServiceList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(allServiceList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("allServiceList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allServiceList_resultStandardSchemeFactory implements SchemeFactory {
      public allServiceList_resultStandardScheme getScheme() {
        return new allServiceList_resultStandardScheme();
      }
    }

    private static class allServiceList_resultStandardScheme extends StandardScheme<allServiceList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allServiceList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>(_list16.size);
                  com.github.jerrysearch.tns.protocol.rpc.TSNode _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.github.jerrysearch.tns.protocol.rpc.TSNode();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allServiceList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.github.jerrysearch.tns.protocol.rpc.TSNode _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allServiceList_resultTupleSchemeFactory implements SchemeFactory {
      public allServiceList_resultTupleScheme getScheme() {
        return new allServiceList_resultTupleScheme();
      }
    }

    private static class allServiceList_resultTupleScheme extends TupleScheme<allServiceList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allServiceList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.github.jerrysearch.tns.protocol.rpc.TSNode _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allServiceList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TSNode>(_list21.size);
            com.github.jerrysearch.tns.protocol.rpc.TSNode _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.github.jerrysearch.tns.protocol.rpc.TSNode();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clusterList_args implements org.apache.thrift.TBase<clusterList_args, clusterList_args._Fields>, java.io.Serializable, Cloneable, Comparable<clusterList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clusterList_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clusterList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clusterList_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clusterList_args.class, metaDataMap);
    }

    public clusterList_args() {
    }

    public clusterList_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clusterList_args(clusterList_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public clusterList_args deepCopy() {
      return new clusterList_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public clusterList_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clusterList_args)
        return this.equals((clusterList_args)that);
      return false;
    }

    public boolean equals(clusterList_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(clusterList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clusterList_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clusterList_argsStandardSchemeFactory implements SchemeFactory {
      public clusterList_argsStandardScheme getScheme() {
        return new clusterList_argsStandardScheme();
      }
    }

    private static class clusterList_argsStandardScheme extends StandardScheme<clusterList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clusterList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clusterList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clusterList_argsTupleSchemeFactory implements SchemeFactory {
      public clusterList_argsTupleScheme getScheme() {
        return new clusterList_argsTupleScheme();
      }
    }

    private static class clusterList_argsTupleScheme extends TupleScheme<clusterList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clusterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clusterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class clusterList_result implements org.apache.thrift.TBase<clusterList_result, clusterList_result._Fields>, java.io.Serializable, Cloneable, Comparable<clusterList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clusterList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clusterList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clusterList_resultTupleSchemeFactory());
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.jerrysearch.tns.protocol.rpc.TCNode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clusterList_result.class, metaDataMap);
    }

    public clusterList_result() {
    }

    public clusterList_result(
      List<com.github.jerrysearch.tns.protocol.rpc.TCNode> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clusterList_result(clusterList_result other) {
      if (other.isSetSuccess()) {
        List<com.github.jerrysearch.tns.protocol.rpc.TCNode> __this__success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>(other.success.size());
        for (com.github.jerrysearch.tns.protocol.rpc.TCNode other_element : other.success) {
          __this__success.add(new com.github.jerrysearch.tns.protocol.rpc.TCNode(other_element));
        }
        this.success = __this__success;
      }
    }

    public clusterList_result deepCopy() {
      return new clusterList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.github.jerrysearch.tns.protocol.rpc.TCNode> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.github.jerrysearch.tns.protocol.rpc.TCNode elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>();
      }
      this.success.add(elem);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.TCNode> getSuccess() {
      return this.success;
    }

    public clusterList_result setSuccess(List<com.github.jerrysearch.tns.protocol.rpc.TCNode> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.github.jerrysearch.tns.protocol.rpc.TCNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clusterList_result)
        return this.equals((clusterList_result)that);
      return false;
    }

    public boolean equals(clusterList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(clusterList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clusterList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clusterList_resultStandardSchemeFactory implements SchemeFactory {
      public clusterList_resultStandardScheme getScheme() {
        return new clusterList_resultStandardScheme();
      }
    }

    private static class clusterList_resultStandardScheme extends StandardScheme<clusterList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clusterList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>(_list24.size);
                  com.github.jerrysearch.tns.protocol.rpc.TCNode _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.github.jerrysearch.tns.protocol.rpc.TCNode();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clusterList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.github.jerrysearch.tns.protocol.rpc.TCNode _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clusterList_resultTupleSchemeFactory implements SchemeFactory {
      public clusterList_resultTupleScheme getScheme() {
        return new clusterList_resultTupleScheme();
      }
    }

    private static class clusterList_resultTupleScheme extends TupleScheme<clusterList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clusterList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.github.jerrysearch.tns.protocol.rpc.TCNode _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clusterList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.TCNode>(_list29.size);
            com.github.jerrysearch.tns.protocol.rpc.TCNode _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.github.jerrysearch.tns.protocol.rpc.TCNode();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class takeAllLogEvent_args implements org.apache.thrift.TBase<takeAllLogEvent_args, takeAllLogEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<takeAllLogEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("takeAllLogEvent_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new takeAllLogEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new takeAllLogEvent_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(takeAllLogEvent_args.class, metaDataMap);
    }

    public takeAllLogEvent_args() {
    }

    public takeAllLogEvent_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public takeAllLogEvent_args(takeAllLogEvent_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public takeAllLogEvent_args deepCopy() {
      return new takeAllLogEvent_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public takeAllLogEvent_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof takeAllLogEvent_args)
        return this.equals((takeAllLogEvent_args)that);
      return false;
    }

    public boolean equals(takeAllLogEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(takeAllLogEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("takeAllLogEvent_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class takeAllLogEvent_argsStandardSchemeFactory implements SchemeFactory {
      public takeAllLogEvent_argsStandardScheme getScheme() {
        return new takeAllLogEvent_argsStandardScheme();
      }
    }

    private static class takeAllLogEvent_argsStandardScheme extends StandardScheme<takeAllLogEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, takeAllLogEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, takeAllLogEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class takeAllLogEvent_argsTupleSchemeFactory implements SchemeFactory {
      public takeAllLogEvent_argsTupleScheme getScheme() {
        return new takeAllLogEvent_argsTupleScheme();
      }
    }

    private static class takeAllLogEvent_argsTupleScheme extends TupleScheme<takeAllLogEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, takeAllLogEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, takeAllLogEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class takeAllLogEvent_result implements org.apache.thrift.TBase<takeAllLogEvent_result, takeAllLogEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<takeAllLogEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("takeAllLogEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new takeAllLogEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new takeAllLogEvent_resultTupleSchemeFactory());
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.jerrysearch.tns.protocol.rpc.event.LogEvent.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(takeAllLogEvent_result.class, metaDataMap);
    }

    public takeAllLogEvent_result() {
    }

    public takeAllLogEvent_result(
      List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public takeAllLogEvent_result(takeAllLogEvent_result other) {
      if (other.isSetSuccess()) {
        List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> __this__success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>(other.success.size());
        for (com.github.jerrysearch.tns.protocol.rpc.event.LogEvent other_element : other.success) {
          __this__success.add(new com.github.jerrysearch.tns.protocol.rpc.event.LogEvent(other_element));
        }
        this.success = __this__success;
      }
    }

    public takeAllLogEvent_result deepCopy() {
      return new takeAllLogEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.github.jerrysearch.tns.protocol.rpc.event.LogEvent elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>();
      }
      this.success.add(elem);
    }

    public List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> getSuccess() {
      return this.success;
    }

    public takeAllLogEvent_result setSuccess(List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof takeAllLogEvent_result)
        return this.equals((takeAllLogEvent_result)that);
      return false;
    }

    public boolean equals(takeAllLogEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(takeAllLogEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("takeAllLogEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class takeAllLogEvent_resultStandardSchemeFactory implements SchemeFactory {
      public takeAllLogEvent_resultStandardScheme getScheme() {
        return new takeAllLogEvent_resultStandardScheme();
      }
    }

    private static class takeAllLogEvent_resultStandardScheme extends StandardScheme<takeAllLogEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, takeAllLogEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>(_list32.size);
                  com.github.jerrysearch.tns.protocol.rpc.event.LogEvent _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.github.jerrysearch.tns.protocol.rpc.event.LogEvent();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, takeAllLogEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.github.jerrysearch.tns.protocol.rpc.event.LogEvent _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class takeAllLogEvent_resultTupleSchemeFactory implements SchemeFactory {
      public takeAllLogEvent_resultTupleScheme getScheme() {
        return new takeAllLogEvent_resultTupleScheme();
      }
    }

    private static class takeAllLogEvent_resultTupleScheme extends TupleScheme<takeAllLogEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, takeAllLogEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.github.jerrysearch.tns.protocol.rpc.event.LogEvent _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, takeAllLogEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.github.jerrysearch.tns.protocol.rpc.event.LogEvent>(_list37.size);
            com.github.jerrysearch.tns.protocol.rpc.event.LogEvent _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.github.jerrysearch.tns.protocol.rpc.event.LogEvent();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

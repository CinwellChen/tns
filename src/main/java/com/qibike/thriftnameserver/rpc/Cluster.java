/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qibike.thriftnameserver.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-25")
public class Cluster {

  public interface Iface {

    /**
     * TNS上线
     * 
     * @param cnode
     */
    public void up(TCNode cnode) throws org.apache.thrift.TException;

    /**
     * 推送服务节点列表
     * 
     * @param sList
     */
    public void pushServiceList(List<TSNode> sList) throws org.apache.thrift.TException;

    /**
     * 推送tns节点列表
     * 
     * @param cList
     */
    public void pushClusterList(List<TCNode> cList) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void up(TCNode cnode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pushServiceList(List<TSNode> sList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pushClusterList(List<TCNode> cList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void up(TCNode cnode) throws org.apache.thrift.TException
    {
      send_up(cnode);
    }

    public void send_up(TCNode cnode) throws org.apache.thrift.TException
    {
      up_args args = new up_args();
      args.setCnode(cnode);
      sendBase("up", args);
    }

    public void pushServiceList(List<TSNode> sList) throws org.apache.thrift.TException
    {
      send_pushServiceList(sList);
    }

    public void send_pushServiceList(List<TSNode> sList) throws org.apache.thrift.TException
    {
      pushServiceList_args args = new pushServiceList_args();
      args.setSList(sList);
      sendBase("pushServiceList", args);
    }

    public void pushClusterList(List<TCNode> cList) throws org.apache.thrift.TException
    {
      send_pushClusterList(cList);
    }

    public void send_pushClusterList(List<TCNode> cList) throws org.apache.thrift.TException
    {
      pushClusterList_args args = new pushClusterList_args();
      args.setCList(cList);
      sendBase("pushClusterList", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void up(TCNode cnode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      up_call method_call = new up_call(cnode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class up_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TCNode cnode;
      public up_call(TCNode cnode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.cnode = cnode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("up", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        up_args args = new up_args();
        args.setCnode(cnode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void pushServiceList(List<TSNode> sList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushServiceList_call method_call = new pushServiceList_call(sList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushServiceList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TSNode> sList;
      public pushServiceList_call(List<TSNode> sList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.sList = sList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushServiceList", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        pushServiceList_args args = new pushServiceList_args();
        args.setSList(sList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void pushClusterList(List<TCNode> cList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushClusterList_call method_call = new pushClusterList_call(cList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushClusterList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TCNode> cList;
      public pushClusterList_call(List<TCNode> cList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.cList = cList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushClusterList", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        pushClusterList_args args = new pushClusterList_args();
        args.setCList(cList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("up", new up());
      processMap.put("pushServiceList", new pushServiceList());
      processMap.put("pushClusterList", new pushClusterList());
      return processMap;
    }

    public static class up<I extends Iface> extends org.apache.thrift.ProcessFunction<I, up_args> {
      public up() {
        super("up");
      }

      public up_args getEmptyArgsInstance() {
        return new up_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, up_args args) throws org.apache.thrift.TException {
        iface.up(args.cnode);
        return null;
      }
    }

    public static class pushServiceList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushServiceList_args> {
      public pushServiceList() {
        super("pushServiceList");
      }

      public pushServiceList_args getEmptyArgsInstance() {
        return new pushServiceList_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, pushServiceList_args args) throws org.apache.thrift.TException {
        iface.pushServiceList(args.sList);
        return null;
      }
    }

    public static class pushClusterList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushClusterList_args> {
      public pushClusterList() {
        super("pushClusterList");
      }

      public pushClusterList_args getEmptyArgsInstance() {
        return new pushClusterList_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, pushClusterList_args args) throws org.apache.thrift.TException {
        iface.pushClusterList(args.cList);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("up", new up());
      processMap.put("pushServiceList", new pushServiceList());
      processMap.put("pushClusterList", new pushClusterList());
      return processMap;
    }

    public static class up<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, up_args, Void> {
      public up() {
        super("up");
      }

      public up_args getEmptyArgsInstance() {
        return new up_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, up_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.up(args.cnode,resultHandler);
      }
    }

    public static class pushServiceList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushServiceList_args, Void> {
      public pushServiceList() {
        super("pushServiceList");
      }

      public pushServiceList_args getEmptyArgsInstance() {
        return new pushServiceList_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, pushServiceList_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.pushServiceList(args.sList,resultHandler);
      }
    }

    public static class pushClusterList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushClusterList_args, Void> {
      public pushClusterList() {
        super("pushClusterList");
      }

      public pushClusterList_args getEmptyArgsInstance() {
        return new pushClusterList_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, pushClusterList_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.pushClusterList(args.cList,resultHandler);
      }
    }

  }

  public static class up_args implements org.apache.thrift.TBase<up_args, up_args._Fields>, java.io.Serializable, Cloneable, Comparable<up_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("up_args");

    private static final org.apache.thrift.protocol.TField CNODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cnode", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new up_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new up_argsTupleSchemeFactory());
    }

    public TCNode cnode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNODE((short)1, "cnode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNODE
            return CNODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNODE, new org.apache.thrift.meta_data.FieldMetaData("cnode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "TCNode")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(up_args.class, metaDataMap);
    }

    public up_args() {
    }

    public up_args(
      TCNode cnode)
    {
      this();
      this.cnode = cnode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public up_args(up_args other) {
      if (other.isSetCnode()) {
        this.cnode = other.cnode;
      }
    }

    public up_args deepCopy() {
      return new up_args(this);
    }

    @Override
    public void clear() {
      this.cnode = null;
    }

    public TCNode getCnode() {
      return this.cnode;
    }

    public up_args setCnode(TCNode cnode) {
      this.cnode = cnode;
      return this;
    }

    public void unsetCnode() {
      this.cnode = null;
    }

    /** Returns true if field cnode is set (has been assigned a value) and false otherwise */
    public boolean isSetCnode() {
      return this.cnode != null;
    }

    public void setCnodeIsSet(boolean value) {
      if (!value) {
        this.cnode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CNODE:
        if (value == null) {
          unsetCnode();
        } else {
          setCnode((TCNode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CNODE:
        return getCnode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CNODE:
        return isSetCnode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof up_args)
        return this.equals((up_args)that);
      return false;
    }

    public boolean equals(up_args that) {
      if (that == null)
        return false;

      boolean this_present_cnode = true && this.isSetCnode();
      boolean that_present_cnode = true && that.isSetCnode();
      if (this_present_cnode || that_present_cnode) {
        if (!(this_present_cnode && that_present_cnode))
          return false;
        if (!this.cnode.equals(that.cnode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cnode = true && (isSetCnode());
      list.add(present_cnode);
      if (present_cnode)
        list.add(cnode);

      return list.hashCode();
    }

    @Override
    public int compareTo(up_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCnode()).compareTo(other.isSetCnode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCnode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnode, other.cnode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("up_args(");
      boolean first = true;

      sb.append("cnode:");
      if (this.cnode == null) {
        sb.append("null");
      } else {
        sb.append(this.cnode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class up_argsStandardSchemeFactory implements SchemeFactory {
      public up_argsStandardScheme getScheme() {
        return new up_argsStandardScheme();
      }
    }

    private static class up_argsStandardScheme extends StandardScheme<up_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, up_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cnode = new TCNode();
                struct.cnode.read(iprot);
                struct.setCnodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, up_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cnode != null) {
          oprot.writeFieldBegin(CNODE_FIELD_DESC);
          struct.cnode.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class up_argsTupleSchemeFactory implements SchemeFactory {
      public up_argsTupleScheme getScheme() {
        return new up_argsTupleScheme();
      }
    }

    private static class up_argsTupleScheme extends TupleScheme<up_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, up_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCnode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCnode()) {
          struct.cnode.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, up_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cnode = new TCNode();
          struct.cnode.read(iprot);
          struct.setCnodeIsSet(true);
        }
      }
    }

  }

  public static class pushServiceList_args implements org.apache.thrift.TBase<pushServiceList_args, pushServiceList_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushServiceList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushServiceList_args");

    private static final org.apache.thrift.protocol.TField S_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushServiceList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushServiceList_argsTupleSchemeFactory());
    }

    public List<TSNode> sList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      S_LIST((short)1, "sList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // S_LIST
            return S_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.S_LIST, new org.apache.thrift.meta_data.FieldMetaData("sList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "TSNode"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushServiceList_args.class, metaDataMap);
    }

    public pushServiceList_args() {
    }

    public pushServiceList_args(
      List<TSNode> sList)
    {
      this();
      this.sList = sList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushServiceList_args(pushServiceList_args other) {
      if (other.isSetSList()) {
        List<TSNode> __this__sList = new ArrayList<TSNode>(other.sList.size());
        for (TSNode other_element : other.sList) {
          __this__sList.add(other_element);
        }
        this.sList = __this__sList;
      }
    }

    public pushServiceList_args deepCopy() {
      return new pushServiceList_args(this);
    }

    @Override
    public void clear() {
      this.sList = null;
    }

    public int getSListSize() {
      return (this.sList == null) ? 0 : this.sList.size();
    }

    public java.util.Iterator<TSNode> getSListIterator() {
      return (this.sList == null) ? null : this.sList.iterator();
    }

    public void addToSList(TSNode elem) {
      if (this.sList == null) {
        this.sList = new ArrayList<TSNode>();
      }
      this.sList.add(elem);
    }

    public List<TSNode> getSList() {
      return this.sList;
    }

    public pushServiceList_args setSList(List<TSNode> sList) {
      this.sList = sList;
      return this;
    }

    public void unsetSList() {
      this.sList = null;
    }

    /** Returns true if field sList is set (has been assigned a value) and false otherwise */
    public boolean isSetSList() {
      return this.sList != null;
    }

    public void setSListIsSet(boolean value) {
      if (!value) {
        this.sList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case S_LIST:
        if (value == null) {
          unsetSList();
        } else {
          setSList((List<TSNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case S_LIST:
        return getSList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case S_LIST:
        return isSetSList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushServiceList_args)
        return this.equals((pushServiceList_args)that);
      return false;
    }

    public boolean equals(pushServiceList_args that) {
      if (that == null)
        return false;

      boolean this_present_sList = true && this.isSetSList();
      boolean that_present_sList = true && that.isSetSList();
      if (this_present_sList || that_present_sList) {
        if (!(this_present_sList && that_present_sList))
          return false;
        if (!this.sList.equals(that.sList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sList = true && (isSetSList());
      list.add(present_sList);
      if (present_sList)
        list.add(sList);

      return list.hashCode();
    }

    @Override
    public int compareTo(pushServiceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSList()).compareTo(other.isSetSList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sList, other.sList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushServiceList_args(");
      boolean first = true;

      sb.append("sList:");
      if (this.sList == null) {
        sb.append("null");
      } else {
        sb.append(this.sList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushServiceList_argsStandardSchemeFactory implements SchemeFactory {
      public pushServiceList_argsStandardScheme getScheme() {
        return new pushServiceList_argsStandardScheme();
      }
    }

    private static class pushServiceList_argsStandardScheme extends StandardScheme<pushServiceList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushServiceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // S_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.sList = new ArrayList<TSNode>(_list0.size);
                  TSNode _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new TSNode();
                    _elem1.read(iprot);
                    struct.sList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushServiceList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sList != null) {
          oprot.writeFieldBegin(S_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sList.size()));
            for (TSNode _iter3 : struct.sList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushServiceList_argsTupleSchemeFactory implements SchemeFactory {
      public pushServiceList_argsTupleScheme getScheme() {
        return new pushServiceList_argsTupleScheme();
      }
    }

    private static class pushServiceList_argsTupleScheme extends TupleScheme<pushServiceList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushServiceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSList()) {
          {
            oprot.writeI32(struct.sList.size());
            for (TSNode _iter4 : struct.sList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushServiceList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sList = new ArrayList<TSNode>(_list5.size);
            TSNode _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new TSNode();
              _elem6.read(iprot);
              struct.sList.add(_elem6);
            }
          }
          struct.setSListIsSet(true);
        }
      }
    }

  }

  public static class pushClusterList_args implements org.apache.thrift.TBase<pushClusterList_args, pushClusterList_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushClusterList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushClusterList_args");

    private static final org.apache.thrift.protocol.TField C_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushClusterList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushClusterList_argsTupleSchemeFactory());
    }

    public List<TCNode> cList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_LIST((short)1, "cList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_LIST
            return C_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_LIST, new org.apache.thrift.meta_data.FieldMetaData("cList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT              , "TCNode"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushClusterList_args.class, metaDataMap);
    }

    public pushClusterList_args() {
    }

    public pushClusterList_args(
      List<TCNode> cList)
    {
      this();
      this.cList = cList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushClusterList_args(pushClusterList_args other) {
      if (other.isSetCList()) {
        List<TCNode> __this__cList = new ArrayList<TCNode>(other.cList.size());
        for (TCNode other_element : other.cList) {
          __this__cList.add(other_element);
        }
        this.cList = __this__cList;
      }
    }

    public pushClusterList_args deepCopy() {
      return new pushClusterList_args(this);
    }

    @Override
    public void clear() {
      this.cList = null;
    }

    public int getCListSize() {
      return (this.cList == null) ? 0 : this.cList.size();
    }

    public java.util.Iterator<TCNode> getCListIterator() {
      return (this.cList == null) ? null : this.cList.iterator();
    }

    public void addToCList(TCNode elem) {
      if (this.cList == null) {
        this.cList = new ArrayList<TCNode>();
      }
      this.cList.add(elem);
    }

    public List<TCNode> getCList() {
      return this.cList;
    }

    public pushClusterList_args setCList(List<TCNode> cList) {
      this.cList = cList;
      return this;
    }

    public void unsetCList() {
      this.cList = null;
    }

    /** Returns true if field cList is set (has been assigned a value) and false otherwise */
    public boolean isSetCList() {
      return this.cList != null;
    }

    public void setCListIsSet(boolean value) {
      if (!value) {
        this.cList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case C_LIST:
        if (value == null) {
          unsetCList();
        } else {
          setCList((List<TCNode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case C_LIST:
        return getCList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case C_LIST:
        return isSetCList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushClusterList_args)
        return this.equals((pushClusterList_args)that);
      return false;
    }

    public boolean equals(pushClusterList_args that) {
      if (that == null)
        return false;

      boolean this_present_cList = true && this.isSetCList();
      boolean that_present_cList = true && that.isSetCList();
      if (this_present_cList || that_present_cList) {
        if (!(this_present_cList && that_present_cList))
          return false;
        if (!this.cList.equals(that.cList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cList = true && (isSetCList());
      list.add(present_cList);
      if (present_cList)
        list.add(cList);

      return list.hashCode();
    }

    @Override
    public int compareTo(pushClusterList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCList()).compareTo(other.isSetCList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cList, other.cList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushClusterList_args(");
      boolean first = true;

      sb.append("cList:");
      if (this.cList == null) {
        sb.append("null");
      } else {
        sb.append(this.cList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushClusterList_argsStandardSchemeFactory implements SchemeFactory {
      public pushClusterList_argsStandardScheme getScheme() {
        return new pushClusterList_argsStandardScheme();
      }
    }

    private static class pushClusterList_argsStandardScheme extends StandardScheme<pushClusterList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushClusterList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.cList = new ArrayList<TCNode>(_list8.size);
                  TCNode _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new TCNode();
                    _elem9.read(iprot);
                    struct.cList.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setCListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushClusterList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cList != null) {
          oprot.writeFieldBegin(C_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cList.size()));
            for (TCNode _iter11 : struct.cList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushClusterList_argsTupleSchemeFactory implements SchemeFactory {
      public pushClusterList_argsTupleScheme getScheme() {
        return new pushClusterList_argsTupleScheme();
      }
    }

    private static class pushClusterList_argsTupleScheme extends TupleScheme<pushClusterList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushClusterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCList()) {
          {
            oprot.writeI32(struct.cList.size());
            for (TCNode _iter12 : struct.cList)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushClusterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.cList = new ArrayList<TCNode>(_list13.size);
            TCNode _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new TCNode();
              _elem14.read(iprot);
              struct.cList.add(_elem14);
            }
          }
          struct.setCListIsSet(true);
        }
      }
    }

  }

}

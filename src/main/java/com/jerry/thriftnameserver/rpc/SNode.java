/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jerry.thriftnameserver.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-24")
public class SNode implements org.apache.thrift.TBase<SNode, SNode._Fields>, java.io.Serializable, Cloneable, Comparable<SNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SNode");

  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INSTANCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField V_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("vNodes", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PING_FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("pingFrequency", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SNodeTupleSchemeFactory());
  }

  public String host; // required
  public int port; // required
  public String instanceName; // required
  public int vNodes; // required
  public long pingFrequency; // required
  public String serviceName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST((short)1, "host"),
    PORT((short)2, "port"),
    INSTANCE_NAME((short)3, "instanceName"),
    V_NODES((short)4, "vNodes"),
    PING_FREQUENCY((short)5, "pingFrequency"),
    SERVICE_NAME((short)6, "serviceName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST
          return HOST;
        case 2: // PORT
          return PORT;
        case 3: // INSTANCE_NAME
          return INSTANCE_NAME;
        case 4: // V_NODES
          return V_NODES;
        case 5: // PING_FREQUENCY
          return PING_FREQUENCY;
        case 6: // SERVICE_NAME
          return SERVICE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __VNODES_ISSET_ID = 1;
  private static final int __PINGFREQUENCY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSTANCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("instanceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_NODES, new org.apache.thrift.meta_data.FieldMetaData("vNodes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PING_FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("pingFrequency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SNode.class, metaDataMap);
  }

  public SNode() {
  }

  public SNode(
    String host,
    int port,
    String instanceName,
    int vNodes,
    long pingFrequency,
    String serviceName)
  {
    this();
    this.host = host;
    this.port = port;
    setPortIsSet(true);
    this.instanceName = instanceName;
    this.vNodes = vNodes;
    setVNodesIsSet(true);
    this.pingFrequency = pingFrequency;
    setPingFrequencyIsSet(true);
    this.serviceName = serviceName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SNode(SNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.port = other.port;
    if (other.isSetInstanceName()) {
      this.instanceName = other.instanceName;
    }
    this.vNodes = other.vNodes;
    this.pingFrequency = other.pingFrequency;
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
  }

  public SNode deepCopy() {
    return new SNode(this);
  }

  @Override
  public void clear() {
    this.host = null;
    setPortIsSet(false);
    this.port = 0;
    this.instanceName = null;
    setVNodesIsSet(false);
    this.vNodes = 0;
    setPingFrequencyIsSet(false);
    this.pingFrequency = 0;
    this.serviceName = null;
  }

  public String getHost() {
    return this.host;
  }

  public SNode setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public SNode setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String getInstanceName() {
    return this.instanceName;
  }

  public SNode setInstanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  public void unsetInstanceName() {
    this.instanceName = null;
  }

  /** Returns true if field instanceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceName() {
    return this.instanceName != null;
  }

  public void setInstanceNameIsSet(boolean value) {
    if (!value) {
      this.instanceName = null;
    }
  }

  public int getVNodes() {
    return this.vNodes;
  }

  public SNode setVNodes(int vNodes) {
    this.vNodes = vNodes;
    setVNodesIsSet(true);
    return this;
  }

  public void unsetVNodes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VNODES_ISSET_ID);
  }

  /** Returns true if field vNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetVNodes() {
    return EncodingUtils.testBit(__isset_bitfield, __VNODES_ISSET_ID);
  }

  public void setVNodesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VNODES_ISSET_ID, value);
  }

  public long getPingFrequency() {
    return this.pingFrequency;
  }

  public SNode setPingFrequency(long pingFrequency) {
    this.pingFrequency = pingFrequency;
    setPingFrequencyIsSet(true);
    return this;
  }

  public void unsetPingFrequency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PINGFREQUENCY_ISSET_ID);
  }

  /** Returns true if field pingFrequency is set (has been assigned a value) and false otherwise */
  public boolean isSetPingFrequency() {
    return EncodingUtils.testBit(__isset_bitfield, __PINGFREQUENCY_ISSET_ID);
  }

  public void setPingFrequencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PINGFREQUENCY_ISSET_ID, value);
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public SNode setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case INSTANCE_NAME:
      if (value == null) {
        unsetInstanceName();
      } else {
        setInstanceName((String)value);
      }
      break;

    case V_NODES:
      if (value == null) {
        unsetVNodes();
      } else {
        setVNodes((Integer)value);
      }
      break;

    case PING_FREQUENCY:
      if (value == null) {
        unsetPingFrequency();
      } else {
        setPingFrequency((Long)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST:
      return getHost();

    case PORT:
      return Integer.valueOf(getPort());

    case INSTANCE_NAME:
      return getInstanceName();

    case V_NODES:
      return Integer.valueOf(getVNodes());

    case PING_FREQUENCY:
      return Long.valueOf(getPingFrequency());

    case SERVICE_NAME:
      return getServiceName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST:
      return isSetHost();
    case PORT:
      return isSetPort();
    case INSTANCE_NAME:
      return isSetInstanceName();
    case V_NODES:
      return isSetVNodes();
    case PING_FREQUENCY:
      return isSetPingFrequency();
    case SERVICE_NAME:
      return isSetServiceName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SNode)
      return this.equals((SNode)that);
    return false;
  }

  public boolean equals(SNode that) {
    if (that == null)
      return false;

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_instanceName = true && this.isSetInstanceName();
    boolean that_present_instanceName = true && that.isSetInstanceName();
    if (this_present_instanceName || that_present_instanceName) {
      if (!(this_present_instanceName && that_present_instanceName))
        return false;
      if (!this.instanceName.equals(that.instanceName))
        return false;
    }

    boolean this_present_vNodes = true;
    boolean that_present_vNodes = true;
    if (this_present_vNodes || that_present_vNodes) {
      if (!(this_present_vNodes && that_present_vNodes))
        return false;
      if (this.vNodes != that.vNodes)
        return false;
    }

    boolean this_present_pingFrequency = true;
    boolean that_present_pingFrequency = true;
    if (this_present_pingFrequency || that_present_pingFrequency) {
      if (!(this_present_pingFrequency && that_present_pingFrequency))
        return false;
      if (this.pingFrequency != that.pingFrequency)
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_host = true && (isSetHost());
    list.add(present_host);
    if (present_host)
      list.add(host);

    boolean present_port = true;
    list.add(present_port);
    if (present_port)
      list.add(port);

    boolean present_instanceName = true && (isSetInstanceName());
    list.add(present_instanceName);
    if (present_instanceName)
      list.add(instanceName);

    boolean present_vNodes = true;
    list.add(present_vNodes);
    if (present_vNodes)
      list.add(vNodes);

    boolean present_pingFrequency = true;
    list.add(present_pingFrequency);
    if (present_pingFrequency)
      list.add(pingFrequency);

    boolean present_serviceName = true && (isSetServiceName());
    list.add(present_serviceName);
    if (present_serviceName)
      list.add(serviceName);

    return list.hashCode();
  }

  @Override
  public int compareTo(SNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceName()).compareTo(other.isSetInstanceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceName, other.instanceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVNodes()).compareTo(other.isSetVNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vNodes, other.vNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPingFrequency()).compareTo(other.isSetPingFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPingFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pingFrequency, other.pingFrequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SNode(");
    boolean first = true;

    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("instanceName:");
    if (this.instanceName == null) {
      sb.append("null");
    } else {
      sb.append(this.instanceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vNodes:");
    sb.append(this.vNodes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pingFrequency:");
    sb.append(this.pingFrequency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (host == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'host' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'port' because it's a primitive and you chose the non-beans generator.
    if (instanceName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'instanceName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'vNodes' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pingFrequency' because it's a primitive and you chose the non-beans generator.
    if (serviceName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SNodeStandardSchemeFactory implements SchemeFactory {
    public SNodeStandardScheme getScheme() {
      return new SNodeStandardScheme();
    }
  }

  private static class SNodeStandardScheme extends StandardScheme<SNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTANCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceName = iprot.readString();
              struct.setInstanceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // V_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vNodes = iprot.readI32();
              struct.setVNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PING_FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pingFrequency = iprot.readI64();
              struct.setPingFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'port' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVNodes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vNodes' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPingFrequency()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pingFrequency' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.instanceName != null) {
        oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
        oprot.writeString(struct.instanceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(V_NODES_FIELD_DESC);
      oprot.writeI32(struct.vNodes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PING_FREQUENCY_FIELD_DESC);
      oprot.writeI64(struct.pingFrequency);
      oprot.writeFieldEnd();
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SNodeTupleSchemeFactory implements SchemeFactory {
    public SNodeTupleScheme getScheme() {
      return new SNodeTupleScheme();
    }
  }

  private static class SNodeTupleScheme extends TupleScheme<SNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.host);
      oprot.writeI32(struct.port);
      oprot.writeString(struct.instanceName);
      oprot.writeI32(struct.vNodes);
      oprot.writeI64(struct.pingFrequency);
      oprot.writeString(struct.serviceName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.host = iprot.readString();
      struct.setHostIsSet(true);
      struct.port = iprot.readI32();
      struct.setPortIsSet(true);
      struct.instanceName = iprot.readString();
      struct.setInstanceNameIsSet(true);
      struct.vNodes = iprot.readI32();
      struct.setVNodesIsSet(true);
      struct.pingFrequency = iprot.readI64();
      struct.setPingFrequencyIsSet(true);
      struct.serviceName = iprot.readString();
      struct.setServiceNameIsSet(true);
    }
  }

}

